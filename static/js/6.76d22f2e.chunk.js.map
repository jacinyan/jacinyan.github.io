{"version":3,"sources":["app/screens/login/index.styles.ts","app/screens/login/index.tsx","app/screens/register/index.styles.ts","app/screens/register/index.tsx","assets/logo.svg","assets/right.official.svg","assets/left.official.svg","app/UnauthenticatedApp.styles.ts","app/UnauthenticatedApp.tsx"],"names":["Button","styled","BaseButton","LoginScreen","onError","useDocumentTitle","login","useAuth","useAsyncTask","undefined","throwOnError","asyncRun","isLoading","handleSubmit","values","a","trimmedValues","username","trim","password","onFinish","Item","name","rules","required","message","type","id","placeholder","style","fontSize","htmlType","loading","RegisterScreen","register","confirm_password","rest","trimmedRest","Error","Container","div","Card","BaseCard","Header","header","logo","Background","left","right","Title","h2","UnAuthenticatedApp","useState","registered","setRegistered","error","setError","ErrorBox","size","onClick"],"mappings":"iQAGaA,EAASC,YAAOC,IAAPD,CAAH,2D,OC+DJE,EA5DK,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,QACrBC,YAAiB,UAEjB,IAAQC,EAAUC,cAAVD,MACR,EAAgCE,iBAAaC,EAAW,CACtDC,cAAc,IADRC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAIZC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DAIbC,EAJa,2BAKdF,GALc,IAMjBG,SAAUH,EAAOG,SAASC,OAC1BC,SAAUL,EAAOK,SAASD,SAPT,kBAYXP,EAASL,EAAMU,IAZJ,sDAcjBZ,EAAQ,EAAD,IAdU,wDAAH,sDAkBlB,OACE,eAAC,IAAD,CAAMgB,SAAUP,EAAhB,UACE,cAAC,IAAKQ,KAAN,CAEEC,KAAM,WACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAHrC,SAKE,cAAC,IAAD,CACEC,KAAM,OACNC,GAAI,WACJC,YAAa,WACbC,MAAO,CAAEC,SAAU,QAGvB,cAAC,IAAKT,KAAN,CACEC,KAAM,WACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAFrC,SAIE,cAAC,IAAD,CACEC,KAAM,WACNC,GAAI,WACJC,YAAa,WACbC,MAAO,CAAEC,SAAU,QAGvB,cAAC,IAAKT,KAAN,UACE,cAACrB,EAAD,CAAQ0B,KAAM,UAAWK,SAAU,SAAUC,QAASpB,EAAtD,2B,SCvDKZ,EAASC,YAAOC,IAAPD,CAAH,2DCiFJgC,EA9EQ,SAAC,GAAsD,IAApD7B,EAAmD,EAAnDA,QACxBC,YAAiB,WAEjB,IAAQ6B,EAAa3B,cAAb2B,SACR,EAAgC1B,iBAAaC,EAAW,CACtDC,cAAc,IADRC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAIZC,EAAY,uCAAG,iCAAAE,EAAA,yDACnBoB,EADmB,EACnBA,iBACGC,EAFgB,oCAQbC,EARa,2BASdD,GATc,IAUjBnB,SAAUmB,EAAKnB,SAASC,OACxBC,SAAUiB,EAAKjB,SAASD,UAE1BiB,EAAmBA,EAAiBjB,UAEXmB,EAAYlB,SAflB,uBAgBjBf,EAAQ,IAAIkC,MAAM,2BAhBD,mDAoBX3B,EAASuB,EAASG,IApBP,yDAsBjBjC,EAAQ,EAAD,IAtBU,0DAAH,sDA0BlB,OACE,eAAC,IAAD,CAAMgB,SAAUP,EAAhB,UACE,cAAC,IAAKQ,KAAN,CACEC,KAAM,WACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAFrC,SAIE,cAAC,IAAD,CACEC,KAAK,OACLC,GAAI,WACJC,YAAa,WACbC,MAAO,CAAEC,SAAU,QAGvB,cAAC,IAAKT,KAAN,CACEC,KAAM,WACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAFrC,SAIE,cAAC,IAAD,CACEC,KAAK,WACLC,GAAI,WACJC,YAAa,WACbC,MAAO,CAAEC,SAAU,QAGvB,cAAC,IAAKT,KAAN,CACEC,KAAM,mBACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAFrC,SAIE,cAAC,IAAD,CACEC,KAAK,WACLC,GAAI,mBACJC,YAAa,mBACbC,MAAO,CAAEC,SAAU,QAGvB,cAAC,IAAKT,KAAN,UACE,cAAC,EAAD,CAAQK,KAAM,UAAWK,SAAU,SAAUC,QAASpB,EAAtD,2B,SC5EO,MAA0B,iCCA1B,MAA0B,2CCA1B,MAA0B,0CCMnC2B,EAAYtC,IAAOuC,IAAV,uHAOTC,EAAOxC,YAAOyC,IAAPzC,CAAH,oNAUJ0C,EAAS1C,IAAO2C,OAAV,iKACQC,GAOdC,EAAa7C,IAAOuC,IAAV,ySAQUO,EAAcC,GAIlCC,EAAQhD,IAAOiD,GAAV,mF,SCGIC,UAhCY,WACzB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAuB,MAAjD,mBAAOG,EAAP,KAAcC,EAAd,KAEA,OACE,eAACjB,EAAD,WACE,cAACI,EAAD,IACA,cAACG,EAAD,IACA,eAACL,EAAD,WACE,cAACQ,EAAD,UAAQI,EAAa,UAAY,WAChCE,GAAS,cAACE,EAAA,EAAD,CAAUF,MAAOA,IAC1BF,EACC,cAAC,EAAD,CAAgBjD,QAASoD,IAEzB,cAAC,EAAD,CAAapD,QAASoD,IAExB,cAAC,IAAD,IACA,+BAAOH,EAAa,kBAAoB,gBACxC,cAAC,IAAD,CACE3B,KAAK,OACLgC,KAAM,QACNC,QAAS,WACPL,GAAeD,IAJnB,SAOGA,EAAa,UAAY","file":"static/js/6.76d22f2e.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport { Button as BaseButton } from \"antd\";\n\nexport const Button = styled(BaseButton)`\n  width: 100%;\n  padding: 0;\n`;\n","import { Form, Input } from \"antd\";\nimport { useDocumentTitle } from \"hooks/_helpers\";\nimport { useAuth } from \"hooks/auth\";\nimport { useAsyncTask } from \"hooks/api\";\nimport { Button } from \"./index.styles\";\n\nconst LoginScreen = ({ onError }: { onError: (error: Error) => void }) => {\n  useDocumentTitle(\"Log in\");\n\n  const { login } = useAuth();\n  const { asyncRun, isLoading } = useAsyncTask(undefined, {\n    throwOnError: true,\n  });\n\n  const handleSubmit = async (values: {\n    username: string;\n    password: string;\n  }) => {\n    const trimmedValues = {\n      ...values,\n      username: values.username.trim(),\n      password: values.password.trim(),\n    };\n    // console.log(trimmedValues);\n\n    try {\n      await asyncRun(login(trimmedValues));\n    } catch (error) {\n      onError(error);\n    }\n  };\n\n  return (\n    <Form onFinish={handleSubmit}>\n      <Form.Item\n        //type inference for input in handleSubmit with the name prop\n        name={\"username\"}\n        rules={[{ required: true, message: \"Please enter your username\" }]}\n      >\n        <Input\n          type={\"text\"}\n          id={\"username\"}\n          placeholder={\"Username\"}\n          style={{ fontSize: 14 }}\n        />\n      </Form.Item>\n      <Form.Item\n        name={\"password\"}\n        rules={[{ required: true, message: \"Please enter your password\" }]}\n      >\n        <Input\n          type={\"password\"}\n          id={\"password\"}\n          placeholder={\"Password\"}\n          style={{ fontSize: 14 }}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button type={\"primary\"} htmlType={\"submit\"} loading={isLoading}>\n          Sign In\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default LoginScreen;\n","import styled from \"@emotion/styled\";\nimport { Button as BaseButton } from \"antd\";\n\nexport const Button = styled(BaseButton)`\n  width: 100%;\n  padding: 0;\n`;\n","import { Form, Input } from \"antd\";\nimport { useAuth } from \"hooks/auth\";\nimport { useAsyncTask } from \"hooks/api\";\nimport { useDocumentTitle } from \"hooks/_helpers\";\nimport { Button } from \"./index.styles\";\n\nconst RegisterScreen = ({ onError }: { onError: (error: Error) => void }) => {\n  useDocumentTitle(\"Sign Up\");\n\n  const { register } = useAuth();\n  const { asyncRun, isLoading } = useAsyncTask(undefined, {\n    throwOnError: true,\n  });\n\n  const handleSubmit = async ({\n    confirm_password,\n    ...rest\n  }: {\n    username: string;\n    password: string;\n    confirm_password: string;\n  }) => {\n    const trimmedRest = {\n      ...rest,\n      username: rest.username.trim(),\n      password: rest.password.trim(),\n    };\n    confirm_password = confirm_password.trim();\n\n    if (confirm_password !== trimmedRest.password) {\n      onError(new Error(\"Passwords do not match\"));\n      return;\n    }\n    try {\n      await asyncRun(register(trimmedRest));\n    } catch (error) {\n      onError(error);\n    }\n  };\n\n  return (\n    <Form onFinish={handleSubmit}>\n      <Form.Item\n        name={\"username\"}\n        rules={[{ required: true, message: \"Please enter your username\" }]}\n      >\n        <Input\n          type=\"text\"\n          id={\"username\"}\n          placeholder={\"Username\"}\n          style={{ fontSize: 14 }}\n        />\n      </Form.Item>\n      <Form.Item\n        name={\"password\"}\n        rules={[{ required: true, message: \"Please enter your password\" }]}\n      >\n        <Input\n          type=\"password\"\n          id={\"password\"}\n          placeholder={\"Password\"}\n          style={{ fontSize: 14 }}\n        />\n      </Form.Item>\n      <Form.Item\n        name={\"confirm_password\"}\n        rules={[{ required: true, message: \"Please confirm your password\" }]}\n      >\n        <Input\n          type=\"password\"\n          id={\"confirm_password\"}\n          placeholder={\"Confirm Password\"}\n          style={{ fontSize: 14 }}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button type={\"primary\"} htmlType={\"submit\"} loading={isLoading}>\n          Sign Up\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegisterScreen;\n","export default __webpack_public_path__ + \"static/media/logo.efdfa8ed.svg\";","export default __webpack_public_path__ + \"static/media/right.official.954a7eb2.svg\";","export default __webpack_public_path__ + \"static/media/left.official.eb4a35e2.svg\";","import styled from \"@emotion/styled\";\nimport { Card as BaseCard } from \"antd\";\nimport logo from \"assets/logo.svg\";\nimport right from \"assets/right.official.svg\";\nimport left from \"assets/left.official.svg\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 100vh;\n`;\n\nconst Card = styled(BaseCard)`\n  width: 40rem;\n  min-height: 56rem;\n  padding: 3.2rem 4rem;\n  border-radius: 0.3rem;\n  box-sizing: border-box;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 0 10px;\n  text-align: center;\n`;\n\nconst Header = styled.header`\n  background: url(${logo}) no-repeat center;\n  padding: 5rem;\n  background-size: 16rem;\n  background-position-x: 49%;\n  width: 100%;\n`;\n\nconst Background = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: left bottom, right bottom;\n  background-size: 35%, 35%, contain;\n  background-image: url(${left}), url(${right});\n  opacity: 0.8;\n`;\n\nconst Title = styled.h2`\n  margin-bottom: 2.4rem;\n  color: rgb(94, 108, 132);\n`;\n\nexport { Container, Card, Header, Background, Title };\n","import { useState } from \"react\";\nimport { Divider } from \"antd\";\nimport LoginScreen from \"app/screens/login\";\nimport RegisterScreen from \"app/screens/register\";\nimport {\n  Container,\n  Card,\n  Header,\n  Background,\n  Title,\n} from \"./UnauthenticatedApp.styles\";\nimport ErrorBox from \"app/components/common/ErrorBox\";\nimport { Button } from \"antd\";\n\nconst UnAuthenticatedApp = () => {\n  const [registered, setRegistered] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  return (\n    <Container>\n      <Header />\n      <Background />\n      <Card>\n        <Title>{registered ? \"Sign Up\" : \"Log In\"}</Title>\n        {error && <ErrorBox error={error} />}\n        {registered ? (\n          <RegisterScreen onError={setError} />\n        ) : (\n          <LoginScreen onError={setError} />\n        )}\n        <Divider />\n        <span>{registered ? \"Already a user?\" : \"Not a user?\"}</span>\n        <Button\n          type=\"link\"\n          size={\"small\"}\n          onClick={() => {\n            setRegistered(!registered);\n          }}\n        >\n          {registered ? \"Sign In\" : \"Sign Up\"}\n        </Button>\n      </Card>\n    </Container>\n  );\n};\n\nexport default UnAuthenticatedApp;\n"],"sourceRoot":""}